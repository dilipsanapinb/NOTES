## Z-index 
  
  =>z-index is a CSS property that controls the vertical stacking order of elements that overlap in a web page.
  => The z-index property specifies the stack order of an element, relative to the other elements in the same stacking contex.
  =>The z-index value can be either an integer or the keyword "auto". 
  =>  The higher the z-index value, the closer the element is to the top of the stacking order.
  => If two elements overlap, the element with the higher z-index value will appear on top of the other element.

  => Example:
     
     <div style="position: relative; z-index: 1;">This element has a lower z-index value</div>

     <div style="position: absolute; top: 50px; left: 50px; z-index: 2;">This element has a higher z-index value</div>

     => In this example, the second div has a higher z-index value and will be displayed on top of the first div

     Note that z-index only works on positioned elements (position: relative, position: absolute, position: fixed, or position: sticky).

-----------------------------------------------------------------------------------

## Header, article, section, footer

 1) <header> 
     => used to introductory and navigational information about a section of page.
     -> authors name
     -> time and date of  publication
     -> table of contents
     -> navigational information
  
  2) <article>
      => is ment to house a self-contained composition the can loggically be independently recreated out of the pagewithout loosing its mening.
      =>Examples ;
        -> individual blog post or news stories.
  
  3) <section>
     =>is a flexible container for holding content that shares a common information themes or purpose.
  
  4) <footer>
    => used to hold the information that should appear at the end of section of content and contain additional information about the section.
    =>Authors name, copyright information,and related links like contacts.

--------------------

## Building blocks of HTML5

Semantic tags in HTML are tags that give meaning to the content within them. They are used to describe the purpose or meaning of the content, rather than just its presentation. Using semantic tags can help search engines and screen readers to better understand the content on a web page, and can also make it easier for developers to maintain and update the code.

Here are some examples of semantic tags:

<header>: defines the header of a web page or section.
<nav>: defines a section of navigation links.
<main>: defines the main content of a web page.
<article>: defines a self-contained piece of content, such as a blog post or news article.
<section>: defines a section of related content.
<aside>: defines a section of content that is related to the main content, but not necessarily part of it.
<footer>: defines the footer of a web page or section.

Using semantic tags can make your HTML code more readable and understandable, both for human developers and for automated tools like search engines and screen readers. It can also help you structure your content more effectively, making it easier to maintain and update over time.

1) Semantics: allowing you to describe more precisely what your content is.
2) Connectivity: allowing you to communicate with the server in new and innovative ways.
3) Offline and storage: allowing web pages to store data on the client-side locally and operate offline more efficiently.
4) Multimedia: making video and audio first-class citizens in the Open Web.
5) 2D/3D graphics and effects: allowing a much more diverse range of presentation options.
6) Performance and integration: providing greater speed optimization and better usage of computer hardware.
7) Device access: allowing for the usage of various input and output devices.
Styling: letting authors write more sophisticated themes

------------------------
## Responsive web
  => Add viewport
  -> <meta name="viewport" content="width=device-width, initial-scale=1.0">

## Show different Images depending on Browser Width

The HTML <picture> element allows you to define different images for different browser window sizes.

## Responsive Text Size

The text size can be set with a "vw" unit, which means the "viewport width". That way the text size will follow the size of the browser window.

----------------------

## Can you name the four types of @media properties?

1) all, which applies to all media type devices
2) print, which only applies to printers
3) screen, which only applies to screens (desktops, tablets, mobile etc.)
4) speech, which only applies to screen readers


## media query
 @media screen (min-width:320px) and (max-width:768px){

 }

 or

 @media all and (min-width:1024px){

 }

 @media all and (min-width:768px) and (max-width:1024px){

 }

 @media all and (min-width:320px) amd (max-width:767px){

 }

 ## What are optional closing tag?

<p>, <li>, <td>, <tr>, <th>, <html>, <body>, etc. don't have to provide end tag. Whenever browser hits a new tag it automatically ends the previous tag.

----------------------------------------


## Why you would like to use semantic tag?

Search Engine Optimization, accessibility, repurposing, light code.

Many visually impaired person rely on browser speech and semantic tag helps to interpret page content clearly.

Search engine needs to understand page content to rank and semantic tag helps.

Semantic code aids accessibility. Specially, many people whose eyes are not good rely on speech browsers to read pages to them. These programs cannot interpret pages very well unless they are clearly explained.

Help Search engines to better understand pages. Search engine need to understand what your content is about when rank you properly on search engines. Semantic code tends to improve your placement on search engines, as it is easier for the "search engine spiders" to understand.


It’s easier to read and edit, which saves time and money during maintenance.

---------------------------------

## Inline-Block Elements

Inline-block elements are similar to inline elements, except they can have padding and margins added on all four sides.
One common use for using inline-block is for creating navigation links horizontally.
 Some examples of inline-block elements are <input>, <button>, <select>, <textarea> etc.

-----------------------------------------

## Explain the meaning of each of these CSS units for expressing length:

-> cm centimeters
-> em elements (i.e., relative to the font-size of the element; e.g., 2 em means 2 times the current font size)
-> in inches
-> mm millimeters
-> pc picas (1 pc = 12 pt = 1/6th of an inch)
-> pt points (1 pt = 1/72nd of an inch)
-> px pixels (1 px = 1/96th of an inch)

--------------------------------

## In CSS3, how would you select

=> Every <a> element whose href attribute value begins with “https”.
  a[href^="https"]
=> Every <a> element whose href attribute value ends with “.pdf”.
  a[href$=".pdf"]
=> Every <a> element whose href attribute value contains the substring “css”.
  a[href*="css"]

## How to create a zebra striped table with CSS?

To create a zebra-striped table, use the nth-child() selector and add a background-color to all even (or odd) table rows:

tr:nth-child(even) {
    background-color: #f2f2f2
}


## RGB, HEX(Hexadecimal color values), HSLa(Hue Saturation Lightness alpha)

-> eg. of hsla 
    p {
  color: hsla(209, 55%, 32%, 1);
}


--------------------------------------------

## What is CSS preprocessor? 

=> A CSS preprocessor is a scripting language that extends the capabilities of CSS (Cascading Style Sheets) and provides a more efficient and convenient way to write CSS code.

=> The main purpose of a CSS preprocessor is to simplify the process of creating and managing CSS stylesheets by adding features that are not available in standard CSS, such as:

1) Variables: allowing you to define and reuse values throughout your CSS code.
2) Nesting: allowing you to nest CSS selectors inside one another, making your code more readable and easier to manage.
3) Mixins: allowing you to group together sets of CSS declarations that can be reused throughout your code.
4) Functions: allowing you to define and reuse custom functions within your CSS code.
5) Importing: allowing you to split your CSS code into multiple files and import them into a single stylesheet,  but doing so will require an HTTP request to download each CSS file

6) Popular CSS preprocessors include Sass, Less, and Stylus,
PostCSS each with their own syntax and features. These preprocessors are compiled into standard CSS code that can be used in web pages and applications.

Using a CSS preprocessor can help you to write cleaner, more maintainable, and more efficient CSS code, and can save you time and effort in the long run.

## What is the difference between "resetting" and "normalizing" CSS?

1) 1. Resetting: CSS resets aim to remove all built-in browser styling. For example margins, paddings, font-sizes of all elements are reset to be the same. You will have to redeclare styling for common typographic elements.

2) 2. Normalizing: Normalize CSS aims to make built-in browser styling consistent across browsers. It also corrects bugs for common browser dependencies.

---------------

##  Describe the layout of the CSS Box Model and briefly describe each component.

Content: The inner-most part of the box filled with content, such as text, an image, or video player. It has the dimensions content-box width and content-box height.

Padding: The transparent area surrounding the content. It has dimensions padding-box width and padding-box height.

Border: The area surrounding the padding (if any) and content. It has dimensions border-box width and border-box height.

Margin: The transparent outer-most layer that surrounds the border. It separates the element from other elements in the DOM. It has dimensions margin-box width and margin-box height.


## What is the difference between em and rem units?

=> Both em and rem units are based on the font-size CSS property. The only difference is where they inherit their values from.

=> em units inherit their value from the font-size of the parent element
=> rem units inherit their value from the font-size of the root element (html)
=> In most browsers, the font-size of the root element is set to 16px by default.

-----------------------------------

## What are the advantages of using CSS sprites and how are they utilized?
 => 
CSS sprites combine multiple images into one image, limiting the number of HTTP requests a browser has to make, thus improving load times. Even under the new HTTP/2 protocol, this remains true.

=> To utilize a spritesheet in CSS, one would use certain properties, such as background-image, background-position and background-size to ultimately alter the background of an element.

---------------

## What is the purpose of cache busting and how can you achieve it?

Browsers have a cache to temporarily store files on websites so they don't need to be re-downloaded again when switching between pages or reloading the same page. The server is set up to send headers that tell the browser to store the file for a given amount of time. This greatly increases website speed and preserves bandwidth.

However, it can cause problems when the website has been changed by developers because the user's cache still references old files. This can either leave them with old functionality or break a website if the cached CSS and JavaScript files are referencing elements that no longer exist, have moved or have been renamed.

Cache busting is the process of forcing the browser to download the new files. This is done by naming the file something different to the old file.

A common technique to force the browser to re-download the file is to append a query string to the end of the file.

src="js/script.js" => src="js/script.js?v=2"

The browser considers it a different file but prevents the need to change the file name.


## What are defer and async attributes on a <script> tag?
 
 => f neither attribute is present, the script is downloaded and executed synchronously, and will halt parsing of the document until it has finished executing

 => The "defer" attribute downloads the script while the document is still parsing but waits until the document has finished parsing before executing it, equivalent to executing inside a DOMContentLoaded event listener. defer scripts will "execute in order".

 => The "async "attribute downloads the script during parsing the document but will pause the parser to execute the script before it has fully finished parsing. async scripts will "not necessarily execute in order".

=> Example:
    
    <script src="myscript.js"></script>
    <script src="myscript.js" defer></script>
    <script src="myscript.js" async></script>

-------------------------------------------

## What's the difference between a relative, fixed, absolute and statically positioned element?

A positioned element is an element whose computed position property is either relative, absolute, fixed or sticky.

1) static - The default position; the element will flow into the page as it normally would. The top, right, bottom, left and z-index properties do not apply.

2) relative - The element's position is adjusted relative to itself, without changing layout (and thus leaving a gap for the element where it would have been had it not been positioned).

3) absolute - The element is removed from the flow of the page and positioned at a specified position relative to its closest positioned ancestor if any, or otherwise relative to the initial containing block. Absolutely positioned boxes can have margins, and they do not collapse with any other margins. These elements do not affect the position of other elements.

4) fixed - The element is removed from the flow of the page and positioned at a specified position relative to the viewport and doesn't move when scrolled.

5) sticky - Sticky positioning is a hybrid of relative and fixed positioning. The element is treated as relative positioned until it crosses a specified threshold, at which point it is treated as fixed positioned.

----------------------------------

## What is the purpose of main element?

The HTML <main> element represents the "dominant content of the of a document". The main content area "consists of content that is directly related to or expands upon the central topic of a document", or the central functionality of an application.

<main role="main">
    <p>Geckos are a group of usually small, usually nocturnal lizards. 
       They are found on every continent except Australia.</p>
    <p>Many species of gecko have adhesive toe pads which enable them to climb walls and even windows.</p>
</main>

Note: A document mustn't have more than one <main> element that doesn't have the hidden attribute specified.

----------------------------------------------

## Where and why is the rel="noopener" attribute used?

=> The rel="noopener" is an attribute used in <a> elements (hyperlinks).

----------------------------------------

## What does !important mean in CSS?

=> It overrides the cascade and gives the style rule the highest precedence.

     p {
        color: red !important;
      }
    #thing {
        color: green;
      }
    <p id="thing">Will be RED.</p>

---------------------

## What is CSS opacity?
   
   => The opacity CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.
  
        div { background-color: yellow; }

      .light {
        opacity: 0.2; /* Barely see the text over the background */
      }

      .medium {
        opacity: 0.5; /* See the text more clearly over the background */
      }

      .heavy {
        opacity: 0.9; /* See the text very clearly over the background */
      }

      <div class="light">You can barely see this.</div>
      <div class="medium">This is easier to see.</div>
      <div class="heavy">This is very easy to see.</div>

----------------------------------------------------------------

## How do you handle browser differences in your user base?

    The @supports query in CSS can be very useful to scan if the user’s current browser has a certain feature. The @supports CSS at-rule lets you specify declarations that depend on a browser's support for one or more specific CSS features. This is called a feature query. The rule may be placed at the top level of your code or nested inside any other conditional group at-rule.

    => Example:
        @supports (display: grid) {
          div {
            display: grid;
          }
        }

        @supports not (display: grid) {
          div {
            float: right;
          }
        }

----------------------------

## What is Cascade?

    Cascade is a method of defining the weight (importance) of individual styling rules thus allowing conflicting rules to be sorted out should such rules apply to the same selector.

    P {color: white ! important} /* increased weight */
    P (color: black} /* normal weight */

---------

## What are CSS vendor prefixes?

Vendor prefixes are extensions to CSS standards that can be added to these features to prevent incompatibilities from arising when the standard is extended. CSS vendor prefixes for some common platforms are listed below.

-webkit-: Android, Chrome, iOS, and Safari
-moz-: Mozilla Firefox
-ms-: Internet Explorer
-o-: Opera





















